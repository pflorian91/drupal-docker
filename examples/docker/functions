#!/usr/bin/env bash


# Define useful aliases and functions and prepare the directory structure.
# This script can be sourced from the project dir or from the docker dir inside the project dir.
# Other directories lead to unpredictable results!

pushd "$(pwd)" > /dev/null
if [ $(basename "$(pwd)") != "docker" ]; then
  cd docker
fi

# Load the environment without creating the docker environment file
. environment > /dev/null
# Create the environment file for docker and docker-compose
env -i environment | grep -v "_=" | sort > .docker.env


# set some variables
projectdir=$(dirname "$(pwd)")
net="${PROJECT_NAME_PLAIN}_dev_net"


popd >/dev/null

# @function projectdir
#           returns the path of the project dir
function projectdir ()
{
    echo "${projectdir}"
}

# @function docroot
#           returns the path of the document root
function docroot ()
{
    echo "$(projectdir)/www/docroot" # see also "mkdir" at the end of this file
}
# @function web_docroot
#           returns the path of the document root in the web container
function web_docroot()
{
    echo "/var/www/html/docroot"
}
# @function tmp
#           returns the path of the tmp dir
function tmp ()
{
    echo "$(projectdir)/www/tmp" # see also "mkdir" at the end of this file
}
# @function web_tmp
#           returns the path of the tmp dir in the web container
function web_tmp()
{
    echo "/var/www/html/tmp"
}
# @function web_workdir
#           returns the path of the web working dir in the web container
function web_workdir()
{
    echo "/var/www/html/$WWW_WORKDIR"
}

# @function tty_option
#           returns --tty if interactive
# @usage    tty_option
function tty_option() {
    if (tty -s) ; then
        echo --tty;
    fi
}

# @function _php
#           calls php container
# @usage    _php [commands...]
function _php()
{
    docker-compose \
        --project-name "$PROJECT_NAME_PLAIN" \
        -f $(projectdir)/docker/docker-compose.yml \
        run \
        --name=${PROJECT_NAME_PLAIN}_tmp_php_$(date +%H%M%S) \
        --rm \
        --user="${WWW_USER}" \
        --workdir="$(web_workdir)" \
        $PHP_SERVICE "${@}"
}
# @function php
#           calls a shell in the php container or a php command
# @usage    php [php-commands...]
function php()
{
    if [ -e "${@}" ]; then
        _php sh
    else
        _php php "${@}"
    fi
}
# @function phproot
#           executes a shell command in the php container as root user
# @usage    phproot shell-command
function phproot()
{
    web_user=$WWW_USER
    WWW_USER=0
    _php sh -c "${@}"
    WWW_USER=$web_user
}
# @function drush
#           calls dockerized drush for the current project. It uses the current directory as
#           working directory.
# @usage    drush drush-commands...
function drush()
{
    _php drush "${@}"
}

# @function drupal
#           calls docerized drupal console for the current project. It uses the current directory as
#           working directory.
# @usage    drupal drupal-console-commands...
function drupal()
{
    _php drupal "${@}"
}

# @function composer
#           calls docerized composer for the current project. It uses the current directory as
#           working directory.
# @usage    composer composer-commands...
function composer()
{
    _php composer "${@}"
}

function node()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        --user="${WWW_USER}" \
        ${NODE_IMAGE} \
        \
        node "${@}"
}

function npm()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        --user="${WWW_USER}" \
        ${NODE_IMAGE} \
        \
        npm "${@}"
}

function gulp()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        --volume="$(pwd)":/usr/src/app \
        --workdir=/usr/src/app \
        --user="${WWW_USER}" \
        ${NODE_IMAGE} \
        \
        gulp "${@}"
}

function fhelp()
{
    printf "
You can user following commands to call dockerized utilities in Project \e[1m${PROJECT_NAME}\e[0m:
\e[1mphp\e[0m       to open a shell in the php container, as user ${WWW_USER}
\e[1mdrush\e[0m     to call drush in the php container, as user ${WWW_USER}
\e[1mdrupal\e[0m    to call the drupal console in the php container, as user ${WWW_USER}
\e[1mcomposer\e[0m  to call composer in the php container, as user ${WWW_USER}
\e[1mnode\e[0m      to create a node.js container and execute a node.js command
\e[1mnpm\e[0m       to create a node.js container and execute a npm command
\e[1mgulp\e[0m      to create a node.js container and execute a gulp command
php, drush, drupal, and composer are run in $(docroot),
node, npm, and gulp are run in the current dir.
"
}

function _create-database ()
{
    cat <<EOF > "${projectdir}/docker-runtime/mysql-init/0-create_default_db.sql"
DROP DATABASE IF EXISTS $DB_DRUPAL_DB;
CREATE DATABASE $DB_DRUPAL_DB COLLATE utf8mb4_unicode_ci;
GRANT ALL
  ON $DB_DRUPAL_DB.*
  TO '$DB_DRUPAL_USER'@'%'
  IDENTIFIED BY '$DB_DRUPAL_PASSWORD'
  WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOF
}

# set aliases to invoke some tools in a container
alias php=php # if scripts require an alias instead
alias drush=drush # drush.complete.sh requires an alias, does not act on functions
alias drupal=drupal # if scripts require an alias
alias composer=composer # if scripts require an alias
alias node=node # if scripts require an alias
alias npm=npm # if scripts require an alias
alias gulp=gulp # if scripts require an alias

# aliases for convenience
alias home="cd $(projectdir)"

# prepare the directories to set ownership and access rights and to avoid scripts complaining about missing folders
old_umask=$(umask)
umask 000
mkdir "${projectdir}/docker-runtime" 2> /dev/null
mkdir "${projectdir}/docker-runtime/drush" 2> /dev/null
mkdir "${projectdir}/docker-runtime/drush-backups" 2> /dev/null
mkdir "${projectdir}/docker-runtime/console" 2> /dev/null
mkdir "${projectdir}/docker-runtime/log" 2> /dev/null
mkdir "${projectdir}/docker-runtime/mysql" 2> /dev/null
mkdir "${projectdir}/docker-runtime/mysql-init" 2> /dev/null
mkdir "${projectdir}/www" 2> /dev/null
mkdir "${projectdir}/www/docroot" 2> /dev/null # where to place php code
mkdir "${projectdir}/www/private" 2> /dev/null
mkdir "${projectdir}/www/private/default" 2> /dev/null
mkdir "${projectdir}/www/private/default/files" 2> /dev/null # you can place private files here
mkdir "${projectdir}/www/config" 2> /dev/null
mkdir "${projectdir}/www/config/default" 2> /dev/null
mkdir "${projectdir}/www/config/default/sync" 2> /dev/null # you cn place the config files here
mkdir "${projectdir}/www/tmp" 2> /dev/null # scripts will place temporary files here
umask "${old_umask}"

_create-database